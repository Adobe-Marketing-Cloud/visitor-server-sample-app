"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i["return"]&&_i["return"]()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return sliceIterator(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2016 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and are protected by all applicable intellectual property 
* laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
**************************************************************************//*

AMCV Cookie Format:

- The cookie starts with a settings digest followed by a | that is a hash of key settings.
    If the settings of the Visitor instance do not match the hash all fields that can expire are force expired
    so they will be resynced.

- The rest of the cookie is made up of KEY[-EXPIRATION]|VALUE pairs
  . The KEY will be one of the following fields: MCMID, MCCIDH, MCSYNCS, MCIDTS, MCOPTOUT, MCAID, MCAAMLH and MCAAMB.
  . The -EXPIRATION is optional for each field and if present after the - will be the timestamp for when that field expires.
    The expiration timestamp can also be followed by a "S" flagging that field to also expire 
    on a new browser session detected by the presence of the AMCVS_ session cookie.

*/// Parse into: { settingsDigest: { value: 3213, expire: 0, shouldExpireOnSession: false, hasExpired: false... }}
function isSettingsDigest(a){return a.match(/^[\-0-9]+$/)}function parseSettingsDigest(a){var b=1>=arguments.length||void 0===arguments[1]?{}:arguments[1];if(isSettingsDigest(a[0])){var c={value:a[0],hasExpired:!1,shouldExpireOnSession:!1,expire:0};b.settingsDigest=c,a.shift(),1==a.length%2&&a.pop()}return b}function makeAmcvEntry(a){var b=new Date;return _extends({},a,{hasExpired:!!(0<a.expire&&b.getTime()>=1000*a.expire)})}var amcvCookie={pickValues:function pickValues(){var a=0>=arguments.length||void 0===arguments[0]?"":arguments[0],b=1>=arguments.length||void 0===arguments[1]?[]:arguments[1],c=amcvCookie.parse(a);return b.reduce(function(d,e){var f=c[e];return f&&(d[e]=f.value),d},{})},parse:function parse(a){if(!a||"T"===a)return{};var b=decodeURIComponent(a).split("|"),c=parseSettingsDigest(b);for(var d=0,e=b.length;d<e;d+=2){var _b$d$split=b[d].split("-"),_b$d$split2=_slicedToArray(_b$d$split,2),f=_b$d$split2[0],_b$d$split2$=_b$d$split2[1],g=_b$d$split2$===void 0?0:_b$d$split2$,h=b[d+1],j=!!(g&&g.includes("s")),k=g?parseInt(g,10):g;c[f]=makeAmcvEntry({value:h,expire:k,shouldExpireOnSession:j})}return c}};exports.default=amcvCookie;module.exports=exports["default"];