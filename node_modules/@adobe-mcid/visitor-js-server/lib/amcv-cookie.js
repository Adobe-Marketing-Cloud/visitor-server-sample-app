"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// TODO Consider moving this logic into `visitor-js-shared`.

/*

AMCV Cookie Format:

- The cookie starts with a settings digest followed by a | that is a hash of key settings.
    If the settings of the Visitor instance do not match the hash all fields that can expire are force expired
    so they will be resynced.

- The rest of the cookie is made up of KEY[-EXPIRATION]|VALUE pairs
  . The KEY will be one of the following fields: MCMID, MCCIDH, MCSYNCS, MCIDTS, MCOPTOUT, MCAID, MCAAMLH and MCAAMB.
  . The -EXPIRATION is optional for each field and if present after the - will be the timestamp for when that field expires.
    The expiration timestamp can also be followed by a "S" flagging that field to also expire 
    on a new browser session detected by the presence of the AMCVS_ session cookie.

*/

// Parse into: { settingsDigest: { value: 3213, expire: 0, shouldExpireOnSession: false, hasExpired: false... }}

var amcvCookie = {
    pickValues: function pickValues() {
        var cookie = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
        var values = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

        var amcvEntries = amcvCookie.parse(cookie);

        return values.reduce(function (result, valKey) {
            var amcvEntry = amcvEntries[valKey];

            if (amcvEntry && !amcvEntry.hasExpired) {
                result[valKey] = amcvEntry.value;
            }

            return result;
        }, {});
    },
    makeAmcvEntry: function makeAmcvEntry(key, value, expire, shouldExpireOnSession) {
        var now = new Date();

        return {
            key: key,
            value: value,
            expire: expire,
            shouldExpireOnSession: shouldExpireOnSession,
            hasExpired: Boolean(expire > 0 && now.getTime() >= expire * 1000)
        };
    },
    isSettingsDigest: function isSettingsDigest(firstAmcvToken) {
        return firstAmcvToken.match(/^[\-0-9]+$/);
    },
    parseSettingsDigest: function parseSettingsDigest(amcvValues) {
        var parsedObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        if (amcvCookie.isSettingsDigest(amcvValues[0])) {
            var amcvValue = {
                value: amcvValues[0],
                hasExpired: false,
                shouldExpireOnSession: false,
                expire: 0
            };
            parsedObj["settingsDigest"] = amcvValue;
            amcvValues.shift();

            if (amcvValues.length % 2 === 1) {
                amcvValues.pop();
            }
        }

        return parsedObj;
    },
    parse: function parse(cookie) {
        if (!cookie || cookie === "T") {
            return {};
        }

        var amcvValues = decodeURI(cookie).split("|");
        var parsedObj = amcvCookie.parseSettingsDigest(amcvValues);

        for (var i = 0, l = amcvValues.length; i < l; i += 2) {
            var _amcvValues$i$split = amcvValues[i].split("-");

            var _amcvValues$i$split2 = _slicedToArray(_amcvValues$i$split, 2);

            var key = _amcvValues$i$split2[0];
            var _amcvValues$i$split2$ = _amcvValues$i$split2[1];
            var expire = _amcvValues$i$split2$ === undefined ? 0 : _amcvValues$i$split2$;

            var value = amcvValues[i + 1];
            var expireOnSession = Boolean(expire && expire.includes("s"));
            expire = expire ? parseInt(expire, 10) : expire;

            parsedObj[key] = amcvCookie.makeAmcvEntry(key, value, expire, expireOnSession);
        }

        return parsedObj;
    }
};

exports.default = amcvCookie;
module.exports = exports["default"];