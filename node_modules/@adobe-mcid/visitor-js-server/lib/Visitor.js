"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _visitorJsShared = require("visitor-js-shared");

var _amcvCookie = require("./amcv-cookie");

var _targetAdapter = require("./target-adapter");

var _targetAdapter2 = _interopRequireDefault(_targetAdapter);

var _visitorPayload = require("./visitor-payload");

var _visitorPayload2 = _interopRequireDefault(_visitorPayload);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CONSUMER_ID_BASE = "payload:";
var AMCV_PREFIX = "AMCV_";

function Visitor() {
    var orgID = arguments.length <= 0 || arguments[0] === undefined ? (0, _utils.throwError)("Visitor requires an Org ID!") : arguments[0];

    if ((0, _utils.isOrgIDInvalid)(orgID)) {
        (0, _utils.throwError)("Invalid Org ID: it must contain 13 digits and end with `@AdobeOrg`");
    }

    var state = {};
    var setState = function setState(valueObj) {
        return state = Object.assign({}, state, valueObj);
    };

    var generateSDID = function generateSDID() {
        var consumerID = arguments.length <= 0 || arguments[0] === undefined ? (0, _utils.throwError)("consumerID is required") : arguments[0];

        consumerID = "" + CONSUMER_ID_BASE + consumerID;
        var sdid = (0, _visitorJsShared.generateSupplementalID)();
        setState({ sdid: sdid, consumerID: consumerID });
        return sdid;
    };

    this.generatePayload = function (_ref) {
        var consumerID = _ref.consumerID;
        var amcvCookie = _ref.amcvCookie;

        var sdid = generateSDID(consumerID);
        var amcvValues = (0, _amcvCookie.pickValues)(amcvCookie, ["MCMID", "MCAAMB", "MCAAMLH"]);
        var _state = state;
        var customerIDs = _state.customerIDs;

        return (0, _visitorPayload2.default)({ sdid: sdid, amcvValues: amcvValues, customerIDs: customerIDs }, _targetAdapter2.default);
    };

    this.setCustomerIDs = function () {
        var customerIDs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        // Store customer IDs as originally provided in state to be shared with client later on.
        setState({ customerIDs: customerIDs });
    };

    this.getState = function () {
        return _defineProperty({}, orgID, state);
    };

    this.getCookieName = function () {
        return AMCV_PREFIX + orgID;
    };
}

Visitor.AuthState = _visitorJsShared.AuthState;

exports.default = Visitor;
module.exports = exports["default"];