"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Target adapter will transform an object into the format of `targetSchema`.
function adapt(obj) {
    var objWithTargetKeys = renameKeys(obj, payloadToTargetKeyMap);
    var targetSchema = createTargetSchema();
    populateCustomerIDs(targetSchema, objWithTargetKeys);
    return populate(targetSchema, objWithTargetKeys);
}

exports.default = { adapt: adapt };

// Helpers and Consts:

var ID_KEY_BASE = "vst";
var ID_KEY_SEPARATOR = ".";

var isObject = function isObject(val) {
    return val === Object(val);
};
var filterFalsyProps = function filterFalsyProps(obj) {
    return JSON.parse(JSON.stringify(obj));
};
var forEachKey = function forEachKey(obj, callback) {
    Object.keys(obj).forEach(callback);
};

var payloadToTargetKeyMap = {
    MCMID: "marketingCloudVisitorId",
    MCAAMB: "mboxAAMB",
    MCAAMLH: "mboxMCGLH",
    sdid: "mboxMCSDID"
};

function createTargetSchema() {
    return {
        "marketingCloudVisitorId": undefined,
        "mboxParameters": {
            "mboxAAMB": undefined,
            "mboxMCGLH": undefined,
            "mboxMCSDID": undefined
        }
    };
}

function renameKeys(obj, keysMap) {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(obj).map(function (key) {
        var renamedKey = keysMap[key] ? keysMap[key] : key;
        return _defineProperty({}, renamedKey, obj[key]);
    }))));
}

function populateCustomerIDs(schema, _ref2) {
    var _ref2$customerIDs = _ref2.customerIDs;
    var customerIDs = _ref2$customerIDs === undefined ? {} : _ref2$customerIDs;

    forEachKey(customerIDs, function (idKey) {
        var schemaKey = "" + ID_KEY_BASE + ID_KEY_SEPARATOR + idKey;
        // If value is an object, populate this id in schema per this object's keys.
        var idValue = customerIDs[idKey];
        if (isObject(idValue)) {
            forEachKey(idValue, function (key) {
                var subSchemaKey = "" + schemaKey + ID_KEY_SEPARATOR + key;
                schema.mboxParameters[subSchemaKey] = idValue[key];
            });
        } else {
            // TODO Confirm this implementation.
            // if: customerIDs: { puuid: "12345" } then output "vst.puuid": "12345"
            schema.mboxParameters[schemaKey] = idValue;
        }
    });
}

function populate(schema, objWithValues) {
    Object.keys(schema).forEach(function (key) {
        if (isObject(schema[key])) {
            // Value is an object, populate it's properties.
            populate(schema[key], objWithValues);
        } else if (objWithValues.hasOwnProperty(key)) {
            schema[key] = objWithValues[key];
        }
    });

    return filterFalsyProps(schema);
}
module.exports = exports["default"];