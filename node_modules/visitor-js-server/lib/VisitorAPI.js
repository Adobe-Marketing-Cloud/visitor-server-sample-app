"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = VisitorAPI;

var _visitorJsShared = require("visitor-js-shared");

var _visitorJsShared2 = _interopRequireDefault(_visitorJsShared);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var payloadKeysMap = {
    MCMID: "marketingCloudVisitorId",
    MCAAMB: "mboxAAMB",
    MCAAMLH: "mboxMCGLH"
};

// TODO Extract out into separate module.
function parseAmcvCookie(amcvCookie, valuesMap) {
    amcvCookie = decodeURI(amcvCookie).split("|");
    return Object.keys(valuesMap).reduce(function (amcvVals, key) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = amcvCookie[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var param = _step.value;

                if (param.indexOf(key) >= 0) {
                    var indexOfParam = amcvCookie.indexOf(param);
                    amcvVals[valuesMap[key]] = amcvCookie[indexOfParam + 1];
                    return amcvVals;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }, {});
}

function VisitorAPI() {
    this.generateSupplementalID = _visitorJsShared2.default.generateSupplementalID;

    this.generateVisitorPayload = function (amcvCookie) {
        var visitorPayload = { sdid: this.generateSupplementalID() };

        if (amcvCookie) {
            visitorPayload = Object.assign(visitorPayload, parseAmcvCookie(amcvCookie, payloadKeysMap));
        }

        return visitorPayload;
    };

    // TODO/NOTE: Expose a method that decorates the Target Call URL instead of generating a payload. More abstractions.
    // TODO/NOTE: Expose a setCustomerID method, extracted from client to shared repo.
}
module.exports = exports["default"];