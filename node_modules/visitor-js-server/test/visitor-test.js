const test = require("tape");
const Visitor = require("../src/Visitor");

const visitor = new Visitor();

test("Visitor exposes the expected API", (t) => {
    t.ok(visitor.generateSupplementalID, "VisitorAPI exposes generateSupplementalID");
    t.ok(visitor.generateVisitorPayload, "VisitorAPI exposes generateVisitorPayload");
    t.end();
});

test("generateVisitorPayload should return an SDID only if no cookie exist", (t) => {
    const amcvCookie = "";
    const visitorPayload = visitor.generateVisitorPayload(amcvCookie);
    t.ok(visitorPayload.sdid, "SDID is defined");
    t.equals(Object.keys(visitorPayload).length, 1, "Should only have SDID as key");
    t.end();
});

test("generateVisitorPayload should return an SDID and AMCV cookie content if exists", (t) => {
    const amcvCookie = "-179204249%7CMCIDTS%7C17043%7CMCMID%7C67165637736332133982173426459255729868" +
        "%7CMCAAMLH-1473084544%7C9%7CMCAAMB-1473084544%7CNRX38WO0n5BH8Th-nqAG_A%7CMCOPTOUT-1472486944s" +
        "%7CNONE%7CMCAID%7C2BD9A36D85078621-6000010D20286FCF";

    const visitorPayload = visitor.generateVisitorPayload(amcvCookie);

    t.ok(visitorPayload.sdid, "SDID is defined");
    t.equals(visitorPayload.marketingCloudVisitorId, "67165637736332133982173426459255729868", "Correct MCMID");
    t.equals(visitorPayload.mboxAAMB, "NRX38WO0n5BH8Th-nqAG_A", "Blob is correct");
    t.equals(visitorPayload.mboxMCGLH, "9", "Location hint is correct");
    t.equals(Object.keys(visitorPayload).length, 4, "Should have SDID, MCMID, Location Hint and blob");
    t.end();
});
