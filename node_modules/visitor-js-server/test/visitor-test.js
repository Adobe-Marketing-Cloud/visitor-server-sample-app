const test = require("tape");
const Visitor = require("../src/Visitor");

const visitor = new Visitor("123456789");

const consumerID = "test-customer-A";

test("Visitor Interface:", (t) => {
    t.ok(visitor.generatePayload, "generatePayload");
    t.ok(visitor.getState, "getState");
    t.ok(visitor.setCustomerIDs, "setCustomerIDs");
    t.end();
});

test("generatePayload should return an SDID only if no cookie exist", (t) => {
    const amcvCookie = "";
    const visitorPayload = visitor.generatePayload(consumerID, amcvCookie);
    t.ok(visitorPayload.mboxParameters.mboxMCSDID, "SDID is defined");
    t.equals(Object.keys(visitorPayload).length, 1, "Should only have SDID as key");
    t.end();
});

test("generatePayload should return an SDID and AMCV cookie content if exists", (t) => {
    const future = "2167743609";
    const past = "526748409";

    const amcvCookie = "-179204249%7CMCIDTS%7C17043%7CMCMID%7C67165637736332133982173426459255729868" +
            "%7CMCAAMLH-" + past + "%7C9%7CMCAAMB-" + future + "%7CNRX38WO0n5BH8Th-nqAG_A%7CMCOPTOUT-1472486944s" +
            "%7CNONE%7CMCAID%7C2BD9A36D85078621-6000010D20286FCF";

    visitor.setCustomerIDs({
        "userid": {
            "id": "11112222"
        }
    });

    const visitorPayload = visitor.generatePayload(consumerID, amcvCookie);

    t.ok(visitorPayload.mboxParameters.mboxMCSDID, "SDID is defined");
    t.equals(visitorPayload.marketingCloudVisitorId, "67165637736332133982173426459255729868", "Correct MCMID");
    t.equals(visitorPayload.mboxParameters.mboxAAMB, "NRX38WO0n5BH8Th-nqAG_A", "Blob is correct");
    t.equals(visitorPayload.mboxParameters.mboxMCGLH, undefined, "Location hint shouldn't exist since it's expired");
    t.equals(Object.keys(visitorPayload).length, 2, "Should have MCMID and mboxParameters");
    t.equals(visitorPayload.mboxParameters["vst.userid.id"], "11112222", "vst userid is equal to the id passed to setCustomerIDs");

    t.end();
});

test("Calling getState:", (t) => {
    var state = visitor.getState();
    t.ok(state, "Should return a valid state");
    t.ok(state["123456789@AdobeOrg"], "State should have be partitioned by OrgID");
    t.ok(state["123456789@AdobeOrg"].sdid, "State should contain a SDID");
    t.equal(state["123456789@AdobeOrg"].consumerID, "payload:test-customer-A");
    t.end();
});

test("Calling Visitor without an orgID", (t) => {
    const invalidInstantiation = () => {
        new Visitor();
    };

    t.throws(invalidInstantiation, Error, "Should throws an error");
    t.end();
});
