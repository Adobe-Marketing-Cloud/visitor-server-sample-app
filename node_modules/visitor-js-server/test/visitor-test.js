const test = require("tape");
const Visitor = require("../src/Visitor");

const visitor = new Visitor("123456789");

test("Visitor Interface:", (t) => {
    t.ok(visitor.generateSupplementalID, "generateSupplementalID");
    t.ok(visitor.generateVisitorPayload, "generateVisitorPayload");
    t.ok(visitor.getState, "getState");
    t.ok(visitor.setCustomerIDs, "setCustomerIDs");
    t.end();
});

test("generateVisitorPayload should return an SDID only if no cookie exist", (t) => {
    const amcvCookie = "";
    const visitorPayload = visitor.generateVisitorPayload(amcvCookie);
    t.ok(visitorPayload.mboxParameters.mboxMCSDID, "SDID is defined");
    t.equals(Object.keys(visitorPayload).length, 1, "Should only have SDID as key");
    t.end();
});

test("generateVisitorPayload should return an SDID and AMCV cookie content if exists", (t) => {
    const amcvCookie = "-179204249%7CMCIDTS%7C17043%7CMCMID%7C67165637736332133982173426459255729868" +
        "%7CMCAAMLH-1473084544%7C9%7CMCAAMB-1473084544%7CNRX38WO0n5BH8Th-nqAG_A%7CMCOPTOUT-1472486944s" +
        "%7CNONE%7CMCAID%7C2BD9A36D85078621-6000010D20286FCF";

    visitor.setCustomerIDs({
        "userid": {
            "id": "11112222"
        }
    });

    const visitorPayload = visitor.generateVisitorPayload(amcvCookie);

    t.ok(visitorPayload.mboxParameters.mboxMCSDID, "SDID is defined");
    t.equals(visitorPayload.marketingCloudVisitorId, "67165637736332133982173426459255729868", "Correct MCMID");
    t.equals(visitorPayload.mboxParameters.mboxAAMB, "NRX38WO0n5BH8Th-nqAG_A", "Blob is correct");
    t.equals(visitorPayload.mboxParameters.mboxMCGLH, "9", "Location hint is correct");
    t.equals(Object.keys(visitorPayload).length, 2, "Should have MCMID and mboxParameters");

    t.comment(visitorPayload.mboxParameters.mboxAAMDPUUID);
    t.equals(visitorPayload.mboxParameters.mboxAAMDPUUID, "11112222", "PUUID is equal to the id passed to setCustomerIDs");

    t.end();
});

test("Calling getState:", (t) => {
    var state = visitor.getState();
    t.ok(state, "Should return a valid state");
    t.ok(state["123456789@AdobeOrg"], "State should have be partitioned by OrgID");
    t.ok(state["123456789@AdobeOrg"].sdid, "State should contain a SDID");
    t.end();
});

test("Calling Visitor without an orgID", (t) => {
    const invalidInstantiation = () => {
        new Visitor();
    };

    t.throws(invalidInstantiation, Error, "Should throws an error");
    t.end();
});
